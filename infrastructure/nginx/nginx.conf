events {
    worker_connections 1024;
}

http {
    upstream auth_backend {
        least_conn;
        server auth:8000 max_fails=3 fail_timeout=30s;
        # Add more auth instances for scaling
        # server auth-2:8000 max_fails=3 fail_timeout=30s;
        # server auth-3:8000 max_fails=3 fail_timeout=30s;
    }

    upstream catalog_backend {
        least_conn;
        server catalog:8000 max_fails=3 fail_timeout=30s;
        # Add more catalog instances for scaling
        # server catalog-2:8000 max_fails=3 fail_timeout=30s;
    }

    upstream booking_backend {
        least_conn;
        server booking:8000 max_fails=3 fail_timeout=30s;
        # Add more booking instances for scaling
        # server booking-2:8000 max_fails=3 fail_timeout=30s;
        # server booking-3:8000 max_fails=3 fail_timeout=30s;
    }

    upstream payment_backend {
        least_conn;
        server payment:8000 max_fails=3 fail_timeout=30s;
        # Add more payment instances for scaling
        # server payment-2:8000 max_fails=3 fail_timeout=30s;
    }

    upstream frontend_backend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        # Add more frontend instances for scaling
        # server frontend-2:3000 max_fails=3 fail_timeout=30s;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    server {
        listen 80;
        server_name _;

        # Frontend
        location / {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Auth Service
        location /auth/ {
            limit_req zone=auth burst=10 nodelay;
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://auth_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Catalog Service
        location /catalog/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/catalog/(.*) /$1 break;
            proxy_pass http://catalog_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Booking Service
        location /booking/ {
            limit_req zone=api burst=15 nodelay;
            rewrite ^/booking/(.*) /$1 break;
            proxy_pass http://booking_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Payment Service
        location /payment/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/payment/(.*) /$1 break;
            proxy_pass http://payment_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
