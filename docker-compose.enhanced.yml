services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - event-booking-network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - event-booking-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster - Master
  redis-master:
    image: redis:7-alpine
    hostname: redis-master
    container_name: redis-master
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis-master-data:/data
    networks:
      - event-booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Cluster - Replica 1
  redis-replica-1:
    image: redis:7-alpine
    hostname: redis-replica-1
    container_name: redis-replica-1
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --replicaof redis-master 6379
    depends_on:
      - redis-master
    volumes:
      - redis-replica-1-data:/data
    networks:
      - event-booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Sentinel
  redis-sentinel:
    image: redis:7-alpine
    hostname: redis-sentinel
    container_name: redis-sentinel
    ports:
      - "26379:26379"
    command: redis-sentinel /etc/redis/sentinel.conf
    depends_on:
      - redis-master
      - redis-replica-1
    volumes:
      - ./redis-sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - event-booking-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: eventdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - event-booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ (keeping for backward compatibility)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - event-booking-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - event-booking-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - event-booking-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: jaeger
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - event-booking-network

  # NGINX Load Balancer
  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    hostname: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth
      - catalog
      - booking
      - payment
      - frontend
    volumes:
      - ./services/nginx/nginx-ecs.conf:/etc/nginx/nginx.conf
    networks:
      - event-booking-network

  # Auth Service
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    hostname: auth
    container_name: auth
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/eventdb
      REDIS_URL: redis://redis-master:6379
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVICE_NAME: auth-service
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - event-booking-network

  # Catalog Service
  catalog:
    build:
      context: ./services/catalog
      dockerfile: Dockerfile
    hostname: catalog
    container_name: catalog
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/eventdb
      REDIS_URL: redis://redis-master:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVICE_NAME: catalog-service
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - event-booking-network

  # Booking Service
  booking:
    build:
      context: ./services/booking
      dockerfile: Dockerfile
    hostname: booking
    container_name: booking
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/eventdb
      REDIS_URL: redis://redis-master:6379
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CATALOG_SERVICE_URL: http://catalog:8001
      AUTH_URL: http://auth:8000
      SERVICE_NAME: booking-service
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
      catalog:
        condition: service_started
    networks:
      - event-booking-network

  # Payment Service
  payment:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    hostname: payment
    container_name: payment
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/eventdb
      REDIS_URL: redis://redis-master:6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      BOOKING_SERVICE_URL: http://booking:8002
      AUTH_URL: http://auth:8000
      SERVICE_NAME: payment-service
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
      booking:
        condition: service_started
    networks:
      - event-booking-network

  # Frontend
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    hostname: frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      VITE_API_BASE_URL: http://localhost
    networks:
      - event-booking-network

  # Worker Service for Background Tasks
  worker:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    hostname: worker
    container_name: worker
    ports:
      - "8004:8004"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/eventdb
      REDIS_URL: redis://redis-master:6379
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVICE_NAME: worker-service
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - event-booking-network

volumes:
  postgres-data:
  redis-master-data:
  redis-replica-1-data:
  rabbitmq-data:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
  prometheus-data:
  grafana-data:

networks:
  event-booking-network:
    driver: bridge
